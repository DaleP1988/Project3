{"ast":null,"code":"'use strict';\n\nmodule.exports = NamespaceContext;\n/**\r\n * Scope for XML namespaces\r\n * @param {NamespaceScope} [parent] Parent scope\r\n * @returns {NamespaceScope}\r\n * @constructor\r\n */\n\nfunction NamespaceScope(parent) {\n  if (!(this instanceof NamespaceScope)) {\n    return new NamespaceScope(parent);\n  }\n\n  this.parent = parent;\n  this.namespaces = {};\n}\n/**\r\n * Namespace context that manages hierarchical scopes\r\n * @returns {NamespaceContext}\r\n * @constructor\r\n */\n\n\nfunction NamespaceContext() {\n  if (!(this instanceof NamespaceContext)) {\n    return new NamespaceContext();\n  }\n\n  this.scopes = [];\n  this.pushContext();\n  this.prefixCount = 0;\n}\n/**\r\n * Look up the namespace URI by prefix\r\n * @param {String} prefix Namespace prefix\r\n * @param {Boolean} [localOnly] Search current scope only\r\n * @returns {String} Namespace URI\r\n */\n\n\nNamespaceScope.prototype.getNamespaceURI = function (prefix, localOnly) {\n  switch (prefix) {\n    case 'xml':\n      return 'http://www.w3.org/XML/1998/namespace';\n\n    case 'xmlns':\n      return 'http://www.w3.org/2000/xmlns/';\n\n    default:\n      var nsUri = this.namespaces[prefix];\n      /*jshint -W116 */\n\n      if (nsUri != null) {\n        return nsUri.uri;\n      } else if (!localOnly && this.parent) {\n        return this.parent.getNamespaceURI(prefix);\n      } else {\n        return null;\n      }\n\n  }\n};\n\nNamespaceScope.prototype.getNamespaceMapping = function (prefix) {\n  switch (prefix) {\n    case 'xml':\n      return {\n        uri: 'http://www.w3.org/XML/1998/namespace',\n        prefix: 'xml',\n        declared: true\n      };\n\n    case 'xmlns':\n      return {\n        uri: 'http://www.w3.org/2000/xmlns/',\n        prefix: 'xmlns',\n        declared: true\n      };\n\n    default:\n      var mapping = this.namespaces[prefix];\n      /*jshint -W116 */\n\n      if (mapping != null) {\n        return mapping;\n      } else if (this.parent) {\n        return this.parent.getNamespaceMapping(prefix);\n      } else {\n        return null;\n      }\n\n  }\n};\n/**\r\n * Look up the namespace prefix by URI\r\n * @param {String} nsUri Namespace URI\r\n * @param {Boolean} [localOnly] Search current scope only\r\n * @returns {String} Namespace prefix\r\n */\n\n\nNamespaceScope.prototype.getPrefix = function (nsUri, localOnly) {\n  switch (nsUri) {\n    case 'http://www.w3.org/XML/1998/namespace':\n      return 'xml';\n\n    case 'http://www.w3.org/2000/xmlns/':\n      return 'xmlns';\n\n    default:\n      for (var p in this.namespaces) {\n        if (this.namespaces[p].uri === nsUri) {\n          return p;\n        }\n      }\n\n      if (!localOnly && this.parent) {\n        return this.parent.getPrefix(nsUri);\n      } else {\n        return null;\n      }\n\n  }\n};\n/**\r\n * Add a prefix/URI namespace mapping\r\n * @param {String} prefix Namespace prefix\r\n * @param {String} nsUri Namespace URI\r\n * @param {Boolean} [localOnly] Search current scope only\r\n * @returns {boolean} true if the mapping is added or false if the mapping\r\n * already exists\r\n */\n\n\nNamespaceContext.prototype.addNamespace = function (prefix, nsUri, localOnly) {\n  if (this.getNamespaceURI(prefix, localOnly) === nsUri) {\n    return false;\n  }\n\n  if (this.currentScope) {\n    this.currentScope.namespaces[prefix] = {\n      uri: nsUri,\n      prefix: prefix,\n      declared: false\n    };\n    return true;\n  }\n\n  return false;\n};\n/**\r\n * Push a scope into the context\r\n * @returns {NamespaceScope} The current scope\r\n */\n\n\nNamespaceContext.prototype.pushContext = function () {\n  var scope = new NamespaceScope(this.currentScope);\n  this.scopes.push(scope);\n  this.currentScope = scope;\n  return scope;\n};\n/**\r\n * Pop a scope out of the context\r\n * @returns {NamespaceScope} The removed scope\r\n */\n\n\nNamespaceContext.prototype.popContext = function () {\n  var scope = this.scopes.pop();\n\n  if (scope) {\n    this.currentScope = scope.parent;\n  } else {\n    this.currentScope = null;\n  }\n\n  return scope;\n};\n/**\r\n * Look up the namespace URI by prefix\r\n * @param {String} prefix Namespace prefix\r\n * @param {Boolean} [localOnly] Search current scope only\r\n * @returns {String} Namespace URI\r\n */\n\n\nNamespaceContext.prototype.getNamespaceURI = function (prefix, localOnly) {\n  return this.currentScope && this.currentScope.getNamespaceURI(prefix, localOnly);\n};\n/**\r\n * Look up the namespace prefix by URI\r\n * @param {String} nsURI Namespace URI\r\n * @param {Boolean} [localOnly] Search current scope only\r\n * @returns {String} Namespace prefix\r\n */\n\n\nNamespaceContext.prototype.getPrefix = function (nsUri, localOnly) {\n  return this.currentScope && this.currentScope.getPrefix(nsUri, localOnly);\n};\n/**\r\n * Register a namespace\r\n * @param {String} nsUri Namespace URI\r\n * @returns {String} The matching or generated namespace prefix\r\n */\n\n\nNamespaceContext.prototype.registerNamespace = function (nsUri) {\n  var prefix = this.getPrefix(nsUri);\n\n  if (prefix) {\n    // If the namespace has already mapped to a prefix\n    return prefix;\n  } else {\n    // Try to generate a unique namespace\n    while (true) {\n      prefix = 'ns' + ++this.prefixCount;\n\n      if (!this.getNamespaceURI(prefix)) {\n        // The prefix is not used\n        break;\n      }\n    }\n  }\n\n  this.addNamespace(prefix, nsUri, true);\n  return prefix;\n};\n/**\r\n * Declare a namespace prefix/uri mapping\r\n * @param {String} prefix Namespace prefix\r\n * @param {String} nsUri Namespace URI\r\n * @returns {Boolean} true if the declaration is created\r\n */\n\n\nNamespaceContext.prototype.declareNamespace = function (prefix, nsUri) {\n  if (this.currentScope) {\n    var mapping = this.currentScope.getNamespaceMapping(prefix);\n\n    if (mapping && mapping.uri === nsUri && mapping.declared) {\n      return false;\n    }\n\n    this.currentScope.namespaces[prefix] = {\n      uri: nsUri,\n      prefix: prefix,\n      declared: true\n    };\n    return true;\n  }\n\n  return false;\n};","map":null,"metadata":{},"sourceType":"script"}