{"ast":null,"code":"/*\r\n * Copyright (c) 2011 Vinay Pulim <vinay@milewise.com>\r\n * MIT Licensed\r\n */\n'use strict';\n\nvar url = require('url');\n\nvar req = require('request');\n\nvar debug = require('debug')('node-soap');\n\nvar httpNtlm = require('httpntlm');\n\nvar VERSION = require('../package.json').version;\n/**\r\n * A class representing the http client\r\n * @param {Object} [options] Options object. It allows the customization of\r\n * `request` module\r\n *\r\n * @constructor\r\n */\n\n\nfunction HttpClient(options) {\n  options = options || {};\n  this._request = options.request || req;\n}\n/**\r\n * Build the HTTP request (method, uri, headers, ...)\r\n * @param {String} rurl The resource url\r\n * @param {Object|String} data The payload\r\n * @param {Object} exheaders Extra http headers\r\n * @param {Object} exoptions Extra options\r\n * @returns {Object} The http request object for the `request` module\r\n */\n\n\nHttpClient.prototype.buildRequest = function (rurl, data, exheaders, exoptions) {\n  var curl = url.parse(rurl);\n  var secure = curl.protocol === 'https:';\n  var host = curl.hostname;\n  var port = parseInt(curl.port, 10);\n  var path = [curl.pathname || '/', curl.search || '', curl.hash || ''].join('');\n  var method = data ? 'POST' : 'GET';\n  var headers = {\n    'User-Agent': 'node-soap/' + VERSION,\n    'Accept': 'text/html,application/xhtml+xml,application/xml,text/xml;q=0.9,*/*;q=0.8',\n    'Accept-Encoding': 'none',\n    'Accept-Charset': 'utf-8',\n    'Connection': exoptions && exoptions.forever ? 'keep-alive' : 'close',\n    'Host': host + (isNaN(port) ? '' : ':' + port)\n  };\n  var attr;\n  var header;\n  var mergeOptions = ['headers'];\n\n  if (typeof data === 'string') {\n    headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n    headers['Content-Type'] = 'application/x-www-form-urlencoded';\n  }\n\n  exheaders = exheaders || {};\n\n  for (attr in exheaders) {\n    headers[attr] = exheaders[attr];\n  }\n\n  var options = {\n    uri: curl,\n    method: method,\n    headers: headers,\n    followAllRedirects: true\n  };\n  options.body = data;\n  exoptions = exoptions || {};\n\n  for (attr in exoptions) {\n    if (mergeOptions.indexOf(attr) !== -1) {\n      for (header in exoptions[attr]) {\n        options[attr][header] = exoptions[attr][header];\n      }\n    } else {\n      options[attr] = exoptions[attr];\n    }\n  }\n\n  debug('Http request: %j', options);\n  return options;\n};\n/**\r\n * Handle the http response\r\n * @param {Object} The req object\r\n * @param {Object} res The res object\r\n * @param {Object} body The http body\r\n * @param {Object} The parsed body\r\n */\n\n\nHttpClient.prototype.handleResponse = function (req, res, body) {\n  debug('Http response body: %j', body);\n\n  if (typeof body === 'string') {\n    // Remove any extra characters that appear before or after the SOAP\n    // envelope.\n    var match = body.replace(/<!--[\\s\\S]*?-->/, \"\").match(/(?:<\\?[^?]*\\?>[\\s]*)?<([^:]*):Envelope([\\S\\s]*)<\\/\\1:Envelope>/i);\n\n    if (match) {\n      body = match[0];\n    }\n  }\n\n  return body;\n};\n\nHttpClient.prototype.request = function (rurl, data, callback, exheaders, exoptions) {\n  var self = this;\n  var options = self.buildRequest(rurl, data, exheaders, exoptions);\n  var req;\n\n  if (exoptions !== undefined && exoptions.hasOwnProperty('ntlm')) {\n    // sadly when using ntlm nothing to return\n    // Not sure if this can be handled in a cleaner way rather than an if/else,\n    // will to tidy up if I get chance later, patches welcome - insanityinside\n    options.url = rurl;\n    httpNtlm[options.method.toLowerCase()](options, function (err, res) {\n      if (err) {\n        return callback(err);\n      } // if result is stream\n\n\n      if (typeof res.body !== 'string') {\n        res.body = res.body.toString();\n      }\n\n      res.body = self.handleResponse(req, res, res.body);\n      callback(null, res, res.body);\n    });\n  } else {\n    req = self._request(options, function (err, res, body) {\n      if (err) {\n        return callback(err);\n      }\n\n      body = self.handleResponse(req, res, body);\n      callback(null, res, body);\n    });\n  }\n\n  return req;\n};\n\nHttpClient.prototype.requestStream = function (rurl, data, exheaders, exoptions) {\n  var self = this;\n  var options = self.buildRequest(rurl, data, exheaders, exoptions);\n  return self._request(options);\n};\n\nmodule.exports = HttpClient;","map":null,"metadata":{},"sourceType":"script"}