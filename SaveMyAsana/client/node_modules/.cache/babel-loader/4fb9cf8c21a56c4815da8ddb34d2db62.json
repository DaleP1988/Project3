{"ast":null,"code":"'use strict';\n\nvar fs = require('fs'),\n    https = require('https'),\n    _ = require('lodash');\n/**\r\n * activates SSL for an already existing client\r\n *\r\n * @module ClientSSLSecurity\r\n * @param {Buffer|String}   key\r\n * @param {Buffer|String}   cert\r\n * @param {Buffer|String|Array}   [ca]\r\n * @param {Object}          [defaults]\r\n * @constructor\r\n */\n\n\nfunction ClientSSLSecurity(key, cert, ca, defaults) {\n  if (key) {\n    if (Buffer.isBuffer(key)) {\n      this.key = key;\n    } else if (typeof key === 'string') {\n      this.key = fs.readFileSync(key);\n    } else {\n      throw new Error('key should be a buffer or a string!');\n    }\n  }\n\n  if (cert) {\n    if (Buffer.isBuffer(cert)) {\n      this.cert = cert;\n    } else if (typeof cert === 'string') {\n      this.cert = fs.readFileSync(cert);\n    } else {\n      throw new Error('cert should be a buffer or a string!');\n    }\n  }\n\n  if (ca) {\n    if (Buffer.isBuffer(ca) || Array.isArray(ca)) {\n      this.ca = ca;\n    } else if (typeof ca === 'string') {\n      this.ca = fs.readFileSync(ca);\n    } else {\n      defaults = ca;\n      this.ca = null;\n    }\n  }\n\n  this.defaults = {};\n\n  _.merge(this.defaults, defaults);\n\n  this.agent = null;\n}\n\nClientSSLSecurity.prototype.toXML = function (headers) {\n  return '';\n};\n\nClientSSLSecurity.prototype.addOptions = function (options) {\n  var httpsAgent = null;\n  options.key = this.key;\n  options.cert = this.cert;\n  options.ca = this.ca;\n\n  _.merge(options, this.defaults);\n\n  if (!!options.forever) {\n    if (!this.agent) {\n      options.keepAlive = true;\n      this.agent = new https.Agent(options);\n    }\n\n    httpsAgent = this.agent;\n  } else {\n    httpsAgent = new https.Agent(options);\n  }\n\n  options.agent = httpsAgent;\n};\n\nmodule.exports = ClientSSLSecurity;","map":null,"metadata":{},"sourceType":"script"}