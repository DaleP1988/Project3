{"ast":null,"code":"/**\n * Copyright (c) 2013 Sam Decrock https://github.com/SamDecrock/\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar url = require('url');\n\nvar httpreq = require('httpreq');\n\nvar ntlm = require('./ntlm');\n\nvar _ = require('underscore');\n\nvar http = require('http');\n\nvar https = require('https');\n\nexports.method = function (method, options, finalCallback) {\n  if (!options.workstation) options.workstation = '';\n  if (!options.domain) options.domain = ''; // extract non-ntlm-options:\n\n  var httpreqOptions = _.omit(options, 'url', 'username', 'password', 'workstation', 'domain'); // is https?\n\n\n  var isHttps = false;\n  var reqUrl = url.parse(options.url);\n  if (reqUrl.protocol == 'https:') isHttps = true; // set keepaliveAgent (http or https):\n\n  var keepaliveAgent;\n\n  if (isHttps) {\n    keepaliveAgent = new https.Agent({\n      keepAlive: true\n    });\n  } else {\n    keepaliveAgent = new http.Agent({\n      keepAlive: true\n    });\n  } // build type1 request:\n\n\n  function sendType1Message(callback) {\n    var type1msg = ntlm.createType1Message(options);\n    var type1options = {\n      headers: {\n        'Connection': 'keep-alive',\n        'Authorization': type1msg\n      },\n      timeout: options.timeout || 0,\n      agent: keepaliveAgent,\n      allowRedirects: false // don't redirect in httpreq, because http could change to https which means we need to change the keepaliveAgent\n\n    }; // pass along other options:\n\n    type1options = _.extend({}, _.omit(httpreqOptions, 'headers', 'body'), type1options); // send type1 message to server:\n\n    httpreq[method](options.url, type1options, callback);\n  }\n\n  function sendType3Message(res, callback) {\n    // catch redirect here:\n    if (res.headers.location) {\n      options.url = res.headers.location;\n      return exports[method](options, finalCallback);\n    }\n\n    if (!res.headers['www-authenticate']) return callback(new Error('www-authenticate not found on response of second request')); // parse type2 message from server:\n\n    var type2msg = ntlm.parseType2Message(res.headers['www-authenticate'], callback); //callback only happens on errors\n\n    if (!type2msg) return; // if callback returned an error, the parse-function returns with null\n    // create type3 message:\n\n    var type3msg = ntlm.createType3Message(type2msg, options); // build type3 request:\n\n    var type3options = {\n      headers: {\n        'Connection': 'Close',\n        'Authorization': type3msg\n      },\n      allowRedirects: false,\n      agent: keepaliveAgent\n    }; // pass along other options:\n\n    type3options.headers = _.extend(type3options.headers, httpreqOptions.headers);\n    type3options = _.extend(type3options, _.omit(httpreqOptions, 'headers')); // send type3 message to server:\n\n    httpreq[method](options.url, type3options, callback);\n  }\n\n  sendType1Message(function (err, res) {\n    if (err) return finalCallback(err);\n    setImmediate(function () {\n      // doesn't work without setImmediate()\n      sendType3Message(res, finalCallback);\n    });\n  });\n};\n\n['get', 'put', 'patch', 'post', 'delete', 'options'].forEach(function (method) {\n  exports[method] = exports.method.bind(exports, method);\n});\nexports.ntlm = ntlm; //if you want to use the NTML functions yourself","map":null,"metadata":{},"sourceType":"script"}