{"ast":null,"code":"'use strict';\n\nvar fs = require('fs'),\n    https = require('https'),\n    _ = require('lodash');\n/**\r\n * activates SSL for an already existing client using a PFX cert\r\n *\r\n * @module ClientSSLSecurityPFX\r\n * @param {Buffer|String}   pfx\r\n * @param {String}   passphrase\r\n * @constructor\r\n */\n\n\nfunction ClientSSLSecurityPFX(pfx, passphrase, defaults) {\n  if (typeof passphrase === 'object') {\n    defaults = passphrase;\n  }\n\n  if (pfx) {\n    if (Buffer.isBuffer(pfx)) {\n      this.pfx = pfx;\n    } else if (typeof pfx === 'string') {\n      this.pfx = fs.readFileSync(pfx);\n    } else {\n      throw new Error('supplied pfx file should be a buffer or a file location');\n    }\n  }\n\n  if (passphrase) {\n    if (typeof passphrase === 'string') {\n      this.passphrase = passphrase;\n    }\n  }\n\n  this.defaults = {};\n\n  _.merge(this.defaults, defaults);\n}\n\nClientSSLSecurityPFX.prototype.toXML = function (headers) {\n  return '';\n};\n\nClientSSLSecurityPFX.prototype.addOptions = function (options) {\n  options.pfx = this.pfx;\n\n  if (this.passphrase) {\n    options.passphrase = this.passphrase;\n  }\n\n  _.merge(options, this.defaults);\n\n  options.agent = new https.Agent(options);\n};\n\nmodule.exports = ClientSSLSecurityPFX;","map":null,"metadata":{},"sourceType":"script"}