{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar Transform = require('stream').Transform;\n\nfunction ctor(options, transform) {\n  util.inherits(FirstChunk, Transform);\n\n  if (typeof options === 'function') {\n    transform = options;\n    options = {};\n  }\n\n  if (typeof transform !== 'function') {\n    throw new Error('transform function required');\n  }\n\n  function FirstChunk(options2) {\n    if (!(this instanceof FirstChunk)) {\n      return new FirstChunk(options2);\n    }\n\n    Transform.call(this, options2);\n    this._firstChunk = true;\n    this._transformCalled = false;\n    this._minSize = options.minSize;\n  }\n\n  FirstChunk.prototype._transform = function (chunk, enc, cb) {\n    this._enc = enc;\n\n    if (this._firstChunk) {\n      this._firstChunk = false;\n\n      if (this._minSize == null) {\n        transform.call(this, chunk, enc, cb);\n        this._transformCalled = true;\n        return;\n      }\n\n      this._buffer = chunk;\n      cb();\n      return;\n    }\n\n    if (this._minSize == null) {\n      this.push(chunk);\n      cb();\n      return;\n    }\n\n    if (this._buffer.length < this._minSize) {\n      this._buffer = Buffer.concat([this._buffer, chunk]);\n      cb();\n      return;\n    }\n\n    if (this._buffer.length >= this._minSize) {\n      transform.call(this, this._buffer.slice(), enc, function () {\n        this.push(chunk);\n        cb();\n      }.bind(this));\n      this._transformCalled = true;\n      this._buffer = false;\n      return;\n    }\n\n    this.push(chunk);\n    cb();\n  };\n\n  FirstChunk.prototype._flush = function (cb) {\n    if (!this._buffer) {\n      cb();\n      return;\n    }\n\n    if (this._transformCalled) {\n      this.push(this._buffer);\n      cb();\n    } else {\n      transform.call(this, this._buffer.slice(), this._enc, cb);\n    }\n  };\n\n  return FirstChunk;\n}\n\nmodule.exports = function () {\n  return ctor.apply(ctor, arguments)();\n};\n\nmodule.exports.ctor = ctor;","map":null,"metadata":{},"sourceType":"script"}