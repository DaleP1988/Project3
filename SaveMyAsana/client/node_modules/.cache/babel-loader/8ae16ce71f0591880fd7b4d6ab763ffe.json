{"ast":null,"code":"\"use strict\";\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar ejs = require('ejs');\n\nvar SignedXml = require('xml-crypto').SignedXml;\n\nvar uuid4 = require('uuid/v4');\n\nvar wsseSecurityHeaderTemplate;\nvar wsseSecurityTokenTemplate;\n\nfunction addMinutes(date, minutes) {\n  return new Date(date.getTime() + minutes * 60000);\n}\n\nfunction dateStringForSOAP(date) {\n  return date.getUTCFullYear() + '-' + ('0' + (date.getUTCMonth() + 1)).slice(-2) + '-' + ('0' + date.getUTCDate()).slice(-2) + 'T' + ('0' + date.getUTCHours()).slice(-2) + \":\" + ('0' + date.getUTCMinutes()).slice(-2) + \":\" + ('0' + date.getUTCSeconds()).slice(-2) + \"Z\";\n}\n\nfunction generateCreated() {\n  return dateStringForSOAP(new Date());\n}\n\nfunction generateExpires() {\n  return dateStringForSOAP(addMinutes(new Date(), 10));\n}\n\nfunction insertStr(src, dst, pos) {\n  return [dst.slice(0, pos), src, dst.slice(pos)].join('');\n}\n\nfunction generateId() {\n  return uuid4().replace(/-/gm, '');\n}\n\nfunction WSSecurityCert(privatePEM, publicP12PEM, password, options) {\n  options = options || {};\n  this.publicP12PEM = publicP12PEM.toString().replace('-----BEGIN CERTIFICATE-----', '').replace('-----END CERTIFICATE-----', '').replace(/(\\r\\n|\\n|\\r)/gm, '');\n  this.signer = new SignedXml();\n  this.signer.signingKey = {\n    key: privatePEM,\n    passphrase: password\n  };\n  this.x509Id = \"x509-\" + generateId();\n  this.hasTimeStamp = typeof options.hasTimeStamp === 'undefined' ? true : !!options.hasTimeStamp;\n  this.signatureTransformations = Array.isArray(options.signatureTransformations) ? options.signatureTransformations : [\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\", \"http://www.w3.org/2001/10/xml-exc-c14n#\"];\n\n  var _this = this;\n\n  this.signer.keyInfoProvider = {};\n\n  this.signer.keyInfoProvider.getKeyInfo = function (key) {\n    if (!wsseSecurityTokenTemplate) {\n      wsseSecurityTokenTemplate = ejs.compile(fs.readFileSync(path.join(__dirname, 'templates', 'wsse-security-token.ejs')).toString());\n    }\n\n    return wsseSecurityTokenTemplate({\n      x509Id: _this.x509Id\n    });\n  };\n}\n\nWSSecurityCert.prototype.postProcess = function (xml, envelopeKey) {\n  this.created = generateCreated();\n  this.expires = generateExpires();\n\n  if (!wsseSecurityHeaderTemplate) {\n    wsseSecurityHeaderTemplate = ejs.compile(fs.readFileSync(path.join(__dirname, 'templates', 'wsse-security-header.ejs')).toString());\n  }\n\n  var secHeader = wsseSecurityHeaderTemplate({\n    binaryToken: this.publicP12PEM,\n    created: this.created,\n    expires: this.expires,\n    hasTimeStamp: this.hasTimeStamp,\n    id: this.x509Id\n  });\n  var xmlWithSec = insertStr(secHeader, xml, xml.indexOf('</soap:Header>'));\n  var references = this.signatureTransformations;\n  this.signer.addReference(\"//*[name(.)='\" + envelopeKey + \":Body']\", references);\n\n  if (this.hasTimeStamp) {\n    this.signer.addReference(\"//*[name(.)='wsse:Security']/*[local-name(.)='Timestamp']\", references);\n  }\n\n  this.signer.computeSignature(xmlWithSec);\n  return insertStr(this.signer.getSignatureXml(), xmlWithSec, xmlWithSec.indexOf('</wsse:Security>'));\n};\n\nmodule.exports = WSSecurityCert;","map":null,"metadata":{},"sourceType":"script"}