{"ast":null,"code":"/* jshint laxcomma: true */\nvar utils = require('./utils');\n\nexports.ExclusiveCanonicalization = ExclusiveCanonicalization;\nexports.ExclusiveCanonicalizationWithComments = ExclusiveCanonicalizationWithComments;\n\nfunction ExclusiveCanonicalization() {\n  this.includeComments = false;\n}\n\n;\n\nExclusiveCanonicalization.prototype.attrCompare = function (a, b) {\n  if (!a.namespaceURI && b.namespaceURI) {\n    return -1;\n  }\n\n  if (!b.namespaceURI && a.namespaceURI) {\n    return 1;\n  }\n\n  var left = a.namespaceURI + a.localName;\n  var right = b.namespaceURI + b.localName;\n  if (left === right) return 0;else if (left < right) return -1;else return 1;\n};\n\nExclusiveCanonicalization.prototype.nsCompare = function (a, b) {\n  var attr1 = a.prefix;\n  var attr2 = b.prefix;\n\n  if (attr1 == attr2) {\n    return 0;\n  }\n\n  return attr1.localeCompare(attr2);\n};\n\nExclusiveCanonicalization.prototype.renderAttrs = function (node, defaultNS) {\n  var a,\n      i,\n      attr,\n      res = [],\n      attrListToRender = [];\n\n  if (node.nodeType === 8) {\n    return this.renderComment(node);\n  }\n\n  if (node.attributes) {\n    for (i = 0; i < node.attributes.length; ++i) {\n      attr = node.attributes[i]; //ignore namespace definition attributes\n\n      if (attr.name.indexOf(\"xmlns\") === 0) {\n        continue;\n      }\n\n      attrListToRender.push(attr);\n    }\n  }\n\n  attrListToRender.sort(this.attrCompare);\n\n  for (a in attrListToRender) {\n    if (!attrListToRender.hasOwnProperty(a)) {\n      continue;\n    }\n\n    attr = attrListToRender[a];\n    res.push(\" \", attr.name, '=\"', utils.encodeSpecialCharactersInAttribute(attr.value), '\"');\n  }\n\n  return res.join(\"\");\n};\n/**\n * Create the string of all namespace declarations that should appear on this element\n *\n * @param {Node} node. The node we now render\n * @param {Array} prefixesInScope. The prefixes defined on this node\n *                parents which are a part of the output set\n * @param {String} defaultNs. The current default namespace\n * @return {String}\n * @api private\n */\n\n\nExclusiveCanonicalization.prototype.renderNs = function (node, prefixesInScope, defaultNs, defaultNsForPrefix, inclusiveNamespacesPrefixList) {\n  var a,\n      i,\n      p,\n      attr,\n      res = [],\n      newDefaultNs = defaultNs,\n      nsListToRender = [],\n      currNs = node.namespaceURI || \"\"; //handle the namespaceof the node itself\n\n  if (node.prefix) {\n    if (prefixesInScope.indexOf(node.prefix) == -1) {\n      nsListToRender.push({\n        \"prefix\": node.prefix,\n        \"namespaceURI\": node.namespaceURI || defaultNsForPrefix[node.prefix]\n      });\n      prefixesInScope.push(node.prefix);\n    }\n  } else if (defaultNs != currNs) {\n    //new default ns\n    newDefaultNs = node.namespaceURI;\n    res.push(' xmlns=\"', newDefaultNs, '\"');\n  } //handle the attributes namespace\n\n\n  if (node.attributes) {\n    for (i = 0; i < node.attributes.length; ++i) {\n      attr = node.attributes[i]; //handle all prefixed attributes that are included in the prefix list and where\n      //the prefix is not defined already\n\n      if (attr.prefix && prefixesInScope.indexOf(attr.localName) === -1 && inclusiveNamespacesPrefixList.indexOf(attr.localName) >= 0) {\n        nsListToRender.push({\n          \"prefix\": attr.localName,\n          \"namespaceURI\": attr.value\n        });\n        prefixesInScope.push(attr.localName);\n      } //handle all prefixed attributes that are not xmlns definitions and where\n      //the prefix is not defined already\n\n\n      if (attr.prefix && prefixesInScope.indexOf(attr.prefix) == -1 && attr.prefix != \"xmlns\" && attr.prefix != \"xml\") {\n        nsListToRender.push({\n          \"prefix\": attr.prefix,\n          \"namespaceURI\": attr.namespaceURI\n        });\n        prefixesInScope.push(attr.prefix);\n      }\n    }\n  }\n\n  nsListToRender.sort(this.nsCompare); //render namespaces\n\n  for (a in nsListToRender) {\n    if (!nsListToRender.hasOwnProperty(a)) {\n      continue;\n    }\n\n    p = nsListToRender[a];\n    res.push(\" xmlns:\", p.prefix, '=\"', p.namespaceURI, '\"');\n  }\n\n  return {\n    \"rendered\": res.join(\"\"),\n    \"newDefaultNs\": newDefaultNs\n  };\n};\n\nExclusiveCanonicalization.prototype.processInner = function (node, prefixesInScope, defaultNs, defaultNsForPrefix, inclusiveNamespacesPrefixList) {\n  if (node.nodeType === 8) {\n    return this.renderComment(node);\n  }\n\n  if (node.data) {\n    return utils.encodeSpecialCharactersInText(node.data);\n  }\n\n  var i,\n      pfxCopy,\n      ns = this.renderNs(node, prefixesInScope, defaultNs, defaultNsForPrefix, inclusiveNamespacesPrefixList),\n      res = [\"<\", node.tagName, ns.rendered, this.renderAttrs(node, ns.newDefaultNs), \">\"];\n\n  for (i = 0; i < node.childNodes.length; ++i) {\n    pfxCopy = prefixesInScope.slice(0);\n    res.push(this.processInner(node.childNodes[i], pfxCopy, ns.newDefaultNs, defaultNsForPrefix, inclusiveNamespacesPrefixList));\n  }\n\n  res.push(\"</\", node.tagName, \">\");\n  return res.join(\"\");\n}; // Thanks to deoxxa/xml-c14n for comment renderer\n\n\nExclusiveCanonicalization.prototype.renderComment = function (node) {\n  if (!this.includeComments) {\n    return \"\";\n  }\n\n  var isOutsideDocument = node.ownerDocument === node.parentNode,\n      isBeforeDocument = null,\n      isAfterDocument = null;\n\n  if (isOutsideDocument) {\n    var nextNode = node,\n        previousNode = node;\n\n    while (nextNode !== null) {\n      if (nextNode === node.ownerDocument.documentElement) {\n        isBeforeDocument = true;\n        break;\n      }\n\n      nextNode = nextNode.nextSibling;\n    }\n\n    while (previousNode !== null) {\n      if (previousNode === node.ownerDocument.documentElement) {\n        isAfterDocument = true;\n        break;\n      }\n\n      previousNode = previousNode.previousSibling;\n    }\n  }\n\n  return (isAfterDocument ? \"\\n\" : \"\") + \"<!--\" + utils.encodeSpecialCharactersInText(node.data) + \"-->\" + (isBeforeDocument ? \"\\n\" : \"\");\n};\n/**\n * Perform canonicalization of the given node\n *\n * @param {Node} node\n * @return {String}\n * @api public\n */\n\n\nExclusiveCanonicalization.prototype.process = function (node, options) {\n  options = options || {};\n  var inclusiveNamespacesPrefixList = options.inclusiveNamespacesPrefixList || [];\n  var defaultNs = options.defaultNs || \"\";\n  var defaultNsForPrefix = options.defaultNsForPrefix || {};\n\n  if (!(inclusiveNamespacesPrefixList instanceof Array)) {\n    inclusiveNamespacesPrefixList = inclusiveNamespacesPrefixList.split(' ');\n  }\n\n  var res = this.processInner(node, [], defaultNs, defaultNsForPrefix, inclusiveNamespacesPrefixList);\n  return res;\n};\n\nExclusiveCanonicalization.prototype.getAlgorithmName = function () {\n  return \"http://www.w3.org/2001/10/xml-exc-c14n#\";\n}; // Add c14n#WithComments here (very simple subclass)\n\n\nexports.ExclusiveCanonicalizationWithComments = ExclusiveCanonicalizationWithComments;\n\nfunction ExclusiveCanonicalizationWithComments() {\n  ExclusiveCanonicalization.call(this);\n  this.includeComments = true;\n}\n\n;\nExclusiveCanonicalizationWithComments.prototype = Object.create(ExclusiveCanonicalization.prototype);\nExclusiveCanonicalizationWithComments.prototype.constructor = ExclusiveCanonicalizationWithComments;\n\nExclusiveCanonicalizationWithComments.prototype.getAlgorithmName = function () {\n  return \"http://www.w3.org/2001/10/xml-exc-c14n#WithComments\";\n};","map":null,"metadata":{},"sourceType":"script"}