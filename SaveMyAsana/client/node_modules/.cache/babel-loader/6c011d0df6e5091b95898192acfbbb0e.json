{"ast":null,"code":"\"use strict\";\n\nvar crypto = require('crypto');\n\nvar passwordDigest = require('../utils').passwordDigest;\n\nvar validPasswordTypes = ['PasswordDigest', 'PasswordText'];\n\nfunction WSSecurity(username, password, options) {\n  options = options || {};\n  this._username = username;\n  this._password = password; //must account for backward compatibility for passwordType String param as well as object options defaults: passwordType = 'PasswordText', hasTimeStamp = true   \n\n  if (typeof options === 'string') {\n    this._passwordType = options ? options : 'PasswordText';\n    options = {};\n  } else {\n    this._passwordType = options.passwordType ? options.passwordType : 'PasswordText';\n  }\n\n  if (validPasswordTypes.indexOf(this._passwordType) === -1) {\n    this._passwordType = 'PasswordText';\n  }\n\n  this._hasTimeStamp = options.hasTimeStamp || typeof options.hasTimeStamp === 'boolean' ? !!options.hasTimeStamp : true;\n  /*jshint eqnull:true */\n\n  if (options.hasNonce != null) {\n    this._hasNonce = !!options.hasNonce;\n  }\n\n  this._hasTokenCreated = options.hasTokenCreated || typeof options.hasTokenCreated === 'boolean' ? !!options.hasTokenCreated : true;\n\n  if (options.actor != null) {\n    this._actor = options.actor;\n  }\n\n  if (options.mustUnderstand != null) {\n    this._mustUnderstand = !!options.mustUnderstand;\n  }\n}\n\nWSSecurity.prototype.toXML = function () {\n  // avoid dependency on date formatting libraries\n  function getDate(d) {\n    function pad(n) {\n      return n < 10 ? '0' + n : n;\n    }\n\n    return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + 'Z';\n  }\n\n  var now = new Date();\n  var created = getDate(now);\n  var timeStampXml = '';\n\n  if (this._hasTimeStamp) {\n    var expires = getDate(new Date(now.getTime() + 1000 * 600));\n    timeStampXml = \"<wsu:Timestamp wsu:Id=\\\"Timestamp-\" + created + \"\\\">\" + \"<wsu:Created>\" + created + \"</wsu:Created>\" + \"<wsu:Expires>\" + expires + \"</wsu:Expires>\" + \"</wsu:Timestamp>\";\n  }\n\n  var password, nonce;\n\n  if (this._hasNonce || this._passwordType !== 'PasswordText') {\n    // nonce = base64 ( sha1 ( created + random ) )\n    var nHash = crypto.createHash('sha1');\n    nHash.update(created + Math.random());\n    nonce = nHash.digest('base64');\n  }\n\n  if (this._passwordType === 'PasswordText') {\n    password = \"<wsse:Password Type=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\\\">\" + this._password + \"</wsse:Password>\";\n\n    if (nonce) {\n      password += \"<wsse:Nonce EncodingType=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\\\">\" + nonce + \"</wsse:Nonce>\";\n    }\n  } else {\n    password = \"<wsse:Password Type=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest\\\">\" + passwordDigest(nonce, created, this._password) + \"</wsse:Password>\" + \"<wsse:Nonce EncodingType=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\\\">\" + nonce + \"</wsse:Nonce>\";\n  }\n\n  return \"<wsse:Security \" + (this._actor ? \"soap:actor=\\\"\" + this._actor + \"\\\" \" : \"\") + (this._mustUnderstand ? \"soap:mustUnderstand=\\\"1\\\" \" : \"\") + \"xmlns:wsse=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\\\" xmlns:wsu=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\\\">\" + timeStampXml + \"<wsse:UsernameToken xmlns:wsu=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\\\" wsu:Id=\\\"SecurityToken-\" + created + \"\\\">\" + \"<wsse:Username>\" + this._username + \"</wsse:Username>\" + password + (this._hasTokenCreated ? \"<wsu:Created>\" + created + \"</wsu:Created>\" : \"\") + \"</wsse:UsernameToken>\" + \"</wsse:Security>\";\n};\n\nmodule.exports = WSSecurity;","map":null,"metadata":{},"sourceType":"script"}