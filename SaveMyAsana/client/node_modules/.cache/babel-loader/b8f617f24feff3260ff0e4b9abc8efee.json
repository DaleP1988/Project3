{"ast":null,"code":"/*\nCopyright (c) 2013 Sam Decrock <sam.decrock@gmail.com>\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\nvar querystring = require('querystring');\n\nvar https = require('https');\n\nvar http = require('http');\n\nvar url = require('url');\n\nvar fs = require('fs');\n/**\n * Generate multipart boundary\n *\n * @returns {string}\n */\n\n\nfunction generateBoundary() {\n  var boundary = '---------------------------';\n  var charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  for (var i = 0; i < 29; i++) {\n    boundary += charset.charAt(Math.floor(Math.random() * charset.length));\n  }\n\n  return boundary;\n}\n/**\n * Extract cookies from headers\n *\n * @param headers {object} - Response headers\n * @returns {array} - Extracted cookie strings\n */\n\n\nfunction extractCookies(headers) {\n  var rawcookies = headers['set-cookie'];\n\n  if (!rawcookies) {\n    return [];\n  }\n\n  if (rawcookies == []) {\n    return [];\n  }\n\n  var cookies = [];\n\n  for (var i = 0; i < rawcookies.length; i++) {\n    var rawcookie = rawcookies[i].split(';');\n\n    if (rawcookie[0]) {\n      cookies.push(rawcookie[0]);\n    }\n  }\n\n  return cookies;\n}\n/**\n * Custom HTTP request\n *\n * @callback callback\n * @param o {object} - Request options\n * @param callback [function] - Process response\n * @returns {void}\n */\n\n\nfunction doRequest(o, callback) {\n  if (!callback) {\n    callback = function callback(err) {}; // dummy function\n\n  } // prevent multiple callbacks\n\n\n  var finalCallbackDone = false;\n\n  function finalCallback(err, res) {\n    if (!finalCallbackDone) {\n      finalCallbackDone = true;\n      callback(err, res);\n    }\n  }\n\n  if (o.maxRedirects === undefined) {\n    o.maxRedirects = 10;\n  }\n\n  if (o.encodePostParameters === undefined) {\n    o.encodePostParameters = true;\n  }\n\n  var chunks = [];\n  var body; // Buffer\n\n  var contentType;\n  var port;\n  var host;\n  var path;\n  var isHttps = false;\n\n  if (o.proxy) {\n    port = o.proxy.port;\n    host = o.proxy.host;\n    path = o.url; // complete url\n\n    if (o.proxy.protocol && o.proxy.protocol.match(/https/)) {\n      isHttps = true;\n    }\n  } else {\n    var reqUrl = url.parse(o.url);\n    host = reqUrl.hostname;\n    path = reqUrl.path;\n\n    if (reqUrl.protocol === 'https:') {\n      isHttps = true;\n    }\n\n    if (reqUrl.port) {\n      port = reqUrl.port;\n    } else if (isHttps) {\n      port = 443;\n    } else {\n      port = 80;\n    }\n  }\n\n  if (o.files && o.files.length > 0 && o.method === 'GET') {\n    var err = new Error('Can\\'t send files using GET');\n    err.code = 'CANT_SEND_FILES_USING_GET';\n    return finalCallback(err);\n  }\n\n  if (o.parameters) {\n    if (o.method === 'GET') {\n      path += '?' + querystring.stringify(o.parameters);\n    } else {\n      body = new Buffer(querystring.stringify(o.parameters), 'utf8');\n      contentType = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n  }\n\n  if (o.json) {\n    body = new Buffer(JSON.stringify(o.json), 'utf8');\n    contentType = 'application/json';\n  }\n\n  if (o.files) {\n    var crlf = '\\r\\n';\n    var boundary = generateBoundary();\n    var separator = '--' + boundary;\n    var bodyArray = new Array(); // temporary body array\n    // if the user wants to POST/PUT files, other parameters need to be encoded using 'Content-Disposition'\n\n    for (var key in o.parameters) {\n      // According to RFC 2388 (https://www.ietf.org/rfc/rfc2388.txt)\n      // \"Field names originally in non-ASCII character sets MAY be encoded\n      // within the value of the \"name\" parameter using the standard method\n      // described in RFC 2047.\"\n      // -- encodePostParameters -- true by default and MAY be changed by the user\n      var headerKey = o.encodePostParameters ? encodeURIComponent(key) : key;\n      var encodedParameter = separator + crlf + 'Content-Disposition: form-data; name=\"' + headerKey + '\"' + crlf + crlf + o.parameters[key] + crlf;\n      bodyArray.push(new Buffer(encodedParameter));\n    } // now for the files:\n\n\n    var haveAlreadyAddedAFile = false;\n\n    for (var file in o.files) {\n      var filepath = o.files[file];\n      var filename = filepath.replace(/\\\\/g, '/').replace(/.*\\//, '');\n      var encodedFile = separator + crlf + 'Content-Disposition: form-data; name=\"' + file + '\"; filename=\"' + filename + '\"' + crlf + 'Content-Type: application/octet-stream' + crlf + crlf; // add crlf before separator if we have already added a file\n\n      if (haveAlreadyAddedAFile) {\n        encodedFile = crlf + encodedFile;\n      }\n\n      bodyArray.push(new Buffer(encodedFile)); // add binary file:\n\n      bodyArray.push(require('fs').readFileSync(filepath));\n      haveAlreadyAddedAFile = true;\n    }\n\n    var footer = crlf + separator + '--' + crlf;\n    bodyArray.push(new Buffer(footer)); // set body and contentType:\n\n    body = Buffer.concat(bodyArray);\n    contentType = 'multipart/form-data; boundary=' + boundary;\n  } // overwrites the body if the user passes a body:\n  // clears the content-type\n\n\n  if (o.body) {\n    body = new Buffer(o.body, 'utf8');\n    contentType = null;\n  }\n\n  var requestoptions = {\n    host: host,\n    port: port,\n    path: path,\n    method: o.method,\n    headers: {}\n  };\n\n  if (!o.redirectCount) {\n    o.redirectCount = 0;\n  }\n\n  if (body) {\n    requestoptions.headers['Content-Length'] = body.length;\n  }\n\n  if (contentType) {\n    requestoptions.headers['Content-Type'] = contentType;\n  }\n\n  if (o.cookies) {\n    requestoptions.headers.Cookie = o.cookies.join('; ');\n  }\n\n  if (o.rejectUnauthorized !== undefined && isHttps) {\n    requestoptions.rejectUnauthorized = o.rejectUnauthorized;\n  }\n\n  if (isHttps && o.key) {\n    requestoptions.key = o.key;\n  }\n\n  if (isHttps && o.cert) {\n    requestoptions.cert = o.cert;\n  }\n\n  if (isHttps && o.secureProtocol) {\n    requestoptions.secureProtocol = o.secureProtocol;\n  }\n\n  if (isHttps && o.ciphers) {\n    requestoptions.ciphers = o.ciphers;\n  }\n\n  if (isHttps && o.passphrase) {\n    requestoptions.passphrase = o.passphrase;\n  }\n\n  if (isHttps && o.pfx) {\n    requestoptions.pfx = o.pfx;\n  }\n\n  if (isHttps && o.ca) {\n    requestoptions.ca = o.ca;\n  } // add custom headers:\n\n\n  if (o.headers) {\n    for (var headerkey in o.headers) {\n      requestoptions.headers[headerkey] = o.headers[headerkey];\n    }\n  }\n\n  if (o.agent) {\n    requestoptions.agent = o.agent;\n  }\n\n  if (o.auth) {\n    requestoptions.auth = o.auth;\n  }\n\n  if (o.localAddress) {\n    requestoptions.localAddress = o.localAddress;\n  }\n\n  if (o.secureOptions) {\n    requestoptions.secureOptions = o.secureOptions;\n  }\n  /**\n   * Process request response\n   *\n   * @param res {object} - Response details\n   * @returns {void}\n   */\n\n\n  function requestResponse(res) {\n    var ended = false;\n    var currentsize = 0;\n    var downloadstream = null;\n\n    if (o.downloadlocation) {\n      downloadstream = fs.createWriteStream(o.downloadlocation);\n    }\n\n    res.on('data', function (chunk) {\n      if (o.downloadlocation) {\n        downloadstream.write(chunk); //write it to disk, not to memory\n      } else {\n        chunks.push(chunk);\n      }\n\n      if (o.progressCallback) {\n        var totalsize = res.headers['content-length'];\n\n        if (totalsize) {\n          currentsize += chunk.length;\n          o.progressCallback(null, {\n            url: o.url,\n            totalsize: totalsize,\n            currentsize: currentsize,\n            percentage: currentsize * 100 / totalsize\n          });\n        } else {\n          o.progressCallback(new Error('no content-length specified for file, so no progress monitoring possible'));\n        }\n      }\n    });\n    res.on('end', function (err) {\n      ended = true; // check for redirects\n\n      if (res.headers.location && o.allowRedirects) {\n        // Close any open file\n        if (o.downloadlocation) {\n          downloadstream.end();\n        }\n\n        if (o.redirectCount < o.maxRedirects) {\n          o.redirectCount++;\n          o.url = res.headers.location;\n          o.cookies = extractCookies(res.headers);\n          return doRequest(o, finalCallback);\n        } else {\n          var err = new Error('Too many redirects (> ' + o.maxRedirects + ')');\n          err.code = 'TOOMANYREDIRECTS';\n          err.redirects = o.maxRedirects;\n          return finalCallback(err);\n        }\n      }\n\n      if (!o.downloadlocation) {\n        var responsebody = Buffer.concat(chunks);\n\n        if (!o.binary) {\n          responsebody = responsebody.toString('utf8');\n        }\n\n        finalCallback(null, {\n          headers: res.headers,\n          statusCode: res.statusCode,\n          body: responsebody,\n          cookies: extractCookies(res.headers)\n        });\n      } else {\n        downloadstream.end(null, null, function () {\n          finalCallback(null, {\n            headers: res.headers,\n            statusCode: res.statusCode,\n            downloadlocation: o.downloadlocation,\n            cookies: extractCookies(res.headers)\n          });\n        });\n      }\n    });\n    res.on('close', function () {\n      if (!ended) {\n        finalCallback(new Error('Request aborted'));\n      }\n    });\n  }\n\n  var request; // remove headers with undefined keys or values\n  // else we get an error in Node 0.12.0 about \"setHeader ()\"\n\n  for (var headerName in requestoptions.headers) {\n    var headerValue = requestoptions.headers[headerName];\n\n    if (!headerName || !headerValue) {\n      delete requestoptions.headers[headerName];\n    }\n  }\n\n  if (isHttps) {\n    request = https.request(requestoptions, requestResponse);\n  } else {\n    request = http.request(requestoptions, requestResponse);\n  }\n\n  if (o.timeout) {\n    request.setTimeout(parseInt(o.timeout, 10), function () {\n      var err = new Error('request timed out');\n      err.code = 'TIMEOUT';\n      finalCallback(err);\n      request.abort();\n    });\n  }\n\n  request.on('error', function (err) {\n    finalCallback(err);\n  });\n\n  if (body) {\n    request.write(body);\n  }\n\n  request.end();\n}\n\nexports.doRequest = doRequest;\n/**\n * HTTP GET method\n *\n * @callback callback\n * @param url {string} - Request URL\n * @param [options] {object} - Request options\n * @param callback [function] - Process response\n * @returns {void}\n */\n\nexports.get = function (url, options, callback) {\n  if (callback === undefined && options && typeof options === 'function') {\n    callback = options;\n  }\n\n  var moreOptions = options;\n  moreOptions.url = url;\n  moreOptions.method = 'GET';\n\n  if (moreOptions.allowRedirects === undefined) {\n    moreOptions.allowRedirects = true;\n  }\n\n  doRequest(moreOptions, callback);\n};\n/**\n * HTTP OPTIONS method\n *\n * @callback callback\n * @param url {string} - Request URL\n * @param [options] {object} - Request options\n * @param callback [function] - Process response\n * @returns {void}\n */\n\n\nexports.options = function (url, options, callback) {\n  if (callback === undefined && options && typeof options === 'function') {\n    callback = options;\n  }\n\n  var moreOptions = options;\n  moreOptions.url = url;\n  moreOptions.method = 'OPTIONS';\n  doRequest(moreOptions, callback);\n};\n/**\n * HTTP POST method\n *\n * @callback callback\n * @param url {string} - Request URL\n * @param [options] {object} - Request options\n * @param callback [function] - Process response\n * @returns {void}\n */\n\n\nexports.post = function (url, options, callback) {\n  if (callback === undefined && options && typeof options === 'function') {\n    callback = options;\n  }\n\n  var moreOptions = options;\n  moreOptions.url = url;\n  moreOptions.method = 'POST';\n  doRequest(moreOptions, callback);\n};\n/**\n * HTTP PUT method\n *\n * @callback callback\n * @param url {string} - Request URL\n * @param [options] {object} - Request options\n * @param callback [function] - Process response\n * @returns {void}\n */\n\n\nexports.put = function (url, options, callback) {\n  if (callback === undefined && options && typeof options === 'function') {\n    callback = options;\n  }\n\n  var moreOptions = options;\n  moreOptions.url = url;\n  moreOptions.method = 'PUT';\n  doRequest(moreOptions, callback);\n};\n/**\n * HTTP PATCH method\n *\n * @callback callback\n * @param url {string} - Request URL\n * @param [options] {object} - Request options\n * @param callback [function] - Process response\n * @returns {void}\n */\n\n\nexports.patch = function (url, options, callback) {\n  if (callback === undefined && options && typeof options === 'function') {\n    callback = options;\n  }\n\n  var moreOptions = options;\n  moreOptions.url = url;\n  moreOptions.method = 'PATCH';\n  doRequest(moreOptions, callback);\n};\n/**\n * HTTP DELETE method\n *\n * @callback callback\n * @param url {string} - Request URL\n * @param [options] {object} - Request options\n * @param callback [function] - Process response\n * @returns {void}\n */\n\n\nexports.delete = function (url, options, callback) {\n  if (callback === undefined && options && typeof options === 'function') {\n    callback = options;\n  }\n\n  var moreOptions = options;\n  moreOptions.url = url;\n  moreOptions.method = 'DELETE';\n  doRequest(moreOptions, callback);\n};\n/**\n * Download a file\n *\n * @callback callback\n * @param url {string} - Request URL\n * @param downloadlocation {string} - Path where to store file\n * @param [progressCallback] {function} - Called multiple times during download\n * @param callback {function} - Called once when download ends\n * @returns {void}\n */\n\n\nexports.download = function (url, downloadlocation, progressCallback, callback) {\n  var options = {};\n  options.url = url;\n  options.method = 'GET';\n  options.downloadlocation = downloadlocation;\n  options.allowRedirects = true; // if only 3 args are provided, so no progressCallback\n\n  if (callback === undefined && progressCallback && typeof progressCallback === 'function') {\n    callback = progressCallback;\n  } else {\n    options.progressCallback = progressCallback;\n  }\n\n  doRequest(options, callback);\n};\n/**\n * Upload files\n * old function, can still be used\n *\n * @callback callback\n * @param options {object} - Request options\n * @param callback [function] - Process response\n * @returns {void}\n */\n\n\nexports.uploadFiles = function (options, callback) {\n  var moreOptions = options;\n  moreOptions.method = 'POST';\n  doRequest(moreOptions, callback);\n};","map":null,"metadata":{},"sourceType":"script"}